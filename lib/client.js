// Generated by CoffeeScript 1.6.2
(function() {
  var Fantomo, Inject, debug, utils, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  debug = require('debug')('freemobile:client');

  Fantomo = require('fantomo');

  Inject = require('./inject');

  require('./patch');

  utils = require('./utils');

  module.exports = (function(_super) {
    __extends(exports, _super);

    function exports() {
      this.login = __bind(this.login, this);
      this.inject = __bind(this.inject, this);
      this.on_open_moncompte = __bind(this.on_open_moncompte, this);
      this.on_open = __bind(this.on_open, this);
      this.init = __bind(this.init, this);      _ref = exports.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    exports.prototype.init = function(options) {
      this.options = options != null ? options : {};
      return this.options.browser.urlPrefix = 'https://mobile.free.fr/';
    };

    exports.prototype.on_open = function(path) {
      var routing;

      this.inject('utils');
      routing = {
        'moncompte/': this.on_open_moncompte
      };
      if (routing[path] != null) {
        return routing[path]();
      }
    };

    exports.prototype.on_open_moncompte = function() {
      var _this = this;

      return this.inject('getImages', function(images) {
        var image, _i, _len, _results;

        debug('images', images.length);
        _results = [];
        for (_i = 0, _len = images.length; _i < _len; _i++) {
          image = images[_i];
          _results.push(utils.save_dataURL_to_file(image.newCanvasData, "/tmp/freemobile-" + image.crc32 + ".png"));
        }
        return _results;
      });
    };

    exports.prototype.inject = function() {
      var args, key, _ref1;

      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (Inject.prototype[key] != null) {
        if (args.length > 1) {
          args = args.slice(-1).concat(args.slice(0, -1));
        }
        return (_ref1 = this.browser).evaluate.apply(_ref1, [Inject.prototype[key]].concat(__slice.call(args)));
      } else {
        throw "Inject " + key + " does not exist";
      }
    };

    exports.prototype.login = function(fn) {
      if (fn == null) {
        fn = null;
      }
      if (!this.browser.ready) {
        throw "Browser is not yet ready";
      }
      this.browser.open('moncompte/');
      debug("login=" + this.options.login + ", password=" + this.options.password);
      if (fn) {
        return fn();
      }
    };

    return exports;

  })(Fantomo);

}).call(this);
